package src.multilayerPerceptron;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class EncoderTest {
    static Integer[][] font1 = {
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // 0x20, space
        {0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x04},   // 0x21, !
        {0x09, 0x09, 0x12, 0x00, 0x00, 0x00, 0x00},   // 0x22, "
        {0x0a, 0x0a, 0x1f, 0x0a, 0x1f, 0x0a, 0x0a},   // 0x23, #
        {0x04, 0x0f, 0x14, 0x0e, 0x05, 0x1e, 0x04},   // 0x24, $
        {0x19, 0x19, 0x02, 0x04, 0x08, 0x13, 0x13},   // 0x25, %
        {0x04, 0x0a, 0x0a, 0x0a, 0x15, 0x12, 0x0d},   // 0x26, &
        {0x04, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00},   // 0x27, '
        {0x02, 0x04, 0x08, 0x08, 0x08, 0x04, 0x02},   // 0x28, (
        {0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08},   // 0x29, )
        {0x04, 0x15, 0x0e, 0x1f, 0x0e, 0x15, 0x04},   // 0x2a, *
        {0x00, 0x04, 0x04, 0x1f, 0x04, 0x04, 0x00},   // 0x2b, +
        {0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x08},   // 0x2c, ,
        {0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00},   // 0x2d, -
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c},   // 0x2e, .
        {0x01, 0x01, 0x02, 0x04, 0x08, 0x10, 0x10},   // 0x2f, /
        {0x0e, 0x11, 0x13, 0x15, 0x19, 0x11, 0x0e},   // 0x30, 0
        {0x04, 0x0c, 0x04, 0x04, 0x04, 0x04, 0x0e},   // 0x31, 1
        {0x0e, 0x11, 0x01, 0x02, 0x04, 0x08, 0x1f},   // 0x32, 2
        {0x0e, 0x11, 0x01, 0x06, 0x01, 0x11, 0x0e},   // 0x33, 3
        {0x02, 0x06, 0x0a, 0x12, 0x1f, 0x02, 0x02},   // 0x34, 4
        {0x1f, 0x10, 0x1e, 0x01, 0x01, 0x11, 0x0e},   // 0x35, 5
        {0x06, 0x08, 0x10, 0x1e, 0x11, 0x11, 0x0e},   // 0x36, 6
        {0x1f, 0x01, 0x02, 0x04, 0x08, 0x08, 0x08},   // 0x37, 7
        {0x0e, 0x11, 0x11, 0x0e, 0x11, 0x11, 0x0e},   // 0x38, 8
        {0x0e, 0x11, 0x11, 0x0f, 0x01, 0x02, 0x0c},   // 0x39, 9
        {0x00, 0x0c, 0x0c, 0x00, 0x0c, 0x0c, 0x00},   // 0x3a, :
        {0x00, 0x0c, 0x0c, 0x00, 0x0c, 0x04, 0x08},   // 0x3b, ;
        {0x02, 0x04, 0x08, 0x10, 0x08, 0x04, 0x02},   // 0x3c, <
        {0x00, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x00},   // 0x3d, =
        {0x08, 0x04, 0x02, 0x01, 0x02, 0x04, 0x08},   // 0x3e, >
        {0x0e, 0x11, 0x01, 0x02, 0x04, 0x00, 0x04}   // 0x3f, ?
    };

    static Integer[][] font2 = {
        {0x0e, 0x11, 0x17, 0x15, 0x17, 0x10, 0x0f},   // 0x40, @
        {0x04, 0x0a, 0x11, 0x11, 0x1f, 0x11, 0x11},   // 0x41, A
        {0x1e, 0x11, 0x11, 0x1e, 0x11, 0x11, 0x1e},   // 0x42, B
        {0x0e, 0x11, 0x10, 0x10, 0x10, 0x11, 0x0e},   // 0x43, C
        {0x1e, 0x09, 0x09, 0x09, 0x09, 0x09, 0x1e},   // 0x44, D
        {0x1f, 0x10, 0x10, 0x1c, 0x10, 0x10, 0x1f},   // 0x45, E
        {0x1f, 0x10, 0x10, 0x1f, 0x10, 0x10, 0x10},   // 0x46, F
        {0x0e, 0x11, 0x10, 0x10, 0x13, 0x11, 0x0f},   // 0x37, G
        {0x11, 0x11, 0x11, 0x1f, 0x11, 0x11, 0x11},   // 0x48, H
        {0x0e, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0e},   // 0x49, I
        {0x1f, 0x02, 0x02, 0x02, 0x02, 0x12, 0x0c},   // 0x4a, J
        {0x11, 0x12, 0x14, 0x18, 0x14, 0x12, 0x11},   // 0x4b, K
        {0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1f},   // 0x4c, L
        {0x11, 0x1b, 0x15, 0x11, 0x11, 0x11, 0x11},   // 0x4d, M
        {0x11, 0x11, 0x19, 0x15, 0x13, 0x11, 0x11},   // 0x4e, N
        {0x0e, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0e},   // 0x4f, O
        {0x1e, 0x11, 0x11, 0x1e, 0x10, 0x10, 0x10},   // 0x50, P
        {0x0e, 0x11, 0x11, 0x11, 0x15, 0x12, 0x0d},   // 0x51, Q
        {0x1e, 0x11, 0x11, 0x1e, 0x14, 0x12, 0x11},   // 0x52, R
        {0x0e, 0x11, 0x10, 0x0e, 0x01, 0x11, 0x0e},   // 0x53, S
        {0x1f, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04},   // 0x54, T
        {0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0e},   // 0x55, U
        {0x11, 0x11, 0x11, 0x11, 0x11, 0x0a, 0x04},   // 0x56, V
        {0x11, 0x11, 0x11, 0x15, 0x15, 0x1b, 0x11},   // 0x57, W
        {0x11, 0x11, 0x0a, 0x04, 0x0a, 0x11, 0x11},   // 0x58, X
        {0x11, 0x11, 0x0a, 0x04, 0x04, 0x04, 0x04},   // 0x59, Y
        {0x1f, 0x01, 0x02, 0x04, 0x08, 0x10, 0x1f},   // 0x5a, Z
        {0x0e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0e},   // 0x5b, [
        {0x10, 0x10, 0x08, 0x04, 0x02, 0x01, 0x01},   // 0x5c, \\
        {0x0e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0e},   // 0x5d, ]
        {0x04, 0x0a, 0x11, 0x00, 0x00, 0x00, 0x00},   // 0x5e, ^
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f}   // 0x5f, _
    };

    static Integer[][] font3 = {
        {0x04, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00},   // 0x60, `
        {0x00, 0x0e, 0x01, 0x0d, 0x13, 0x13, 0x0d},   // 0x61, a
        {0x10, 0x10, 0x10, 0x1c, 0x12, 0x12, 0x1c},   // 0x62, b
        {0x00, 0x00, 0x00, 0x0e, 0x10, 0x10, 0x0e},   // 0x63, c
        {0x01, 0x01, 0x01, 0x07, 0x09, 0x09, 0x07},   // 0x64, d
        {0x00, 0x00, 0x0e, 0x11, 0x1f, 0x10, 0x0f},   // 0x65, e
        {0x06, 0x09, 0x08, 0x1c, 0x08, 0x08, 0x08},   // 0x66, f
        {0x0e, 0x11, 0x13, 0x0d, 0x01, 0x01, 0x0e},   // 0x67, g
        {0x10, 0x10, 0x10, 0x16, 0x19, 0x11, 0x11},   // 0x68, h
        {0x00, 0x04, 0x00, 0x0c, 0x04, 0x04, 0x0e},   // 0x69, i
        {0x02, 0x00, 0x06, 0x02, 0x02, 0x12, 0x0c},   // 0x6a, j
        {0x10, 0x10, 0x12, 0x14, 0x18, 0x14, 0x12},   // 0x6b, k
        {0x0c, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04},   // 0x6c, l
        {0x00, 0x00, 0x0a, 0x15, 0x15, 0x11, 0x11},   // 0x6d, m
        {0x00, 0x00, 0x16, 0x19, 0x11, 0x11, 0x11},   // 0x6e, n
        {0x00, 0x00, 0x0e, 0x11, 0x11, 0x11, 0x0e},   // 0x6f, o
        {0x00, 0x1c, 0x12, 0x12, 0x1c, 0x10, 0x10},   // 0x70, p
        {0x00, 0x07, 0x09, 0x09, 0x07, 0x01, 0x01},   // 0x71, q
        {0x00, 0x00, 0x16, 0x19, 0x10, 0x10, 0x10},   // 0x72, r
        {0x00, 0x00, 0x0f, 0x10, 0x0e, 0x01, 0x1e},   // 0x73, s
        {0x08, 0x08, 0x1c, 0x08, 0x08, 0x09, 0x06},   // 0x74, t
        {0x00, 0x00, 0x11, 0x11, 0x11, 0x13, 0x0d},   // 0x75, u
        {0x00, 0x00, 0x11, 0x11, 0x11, 0x0a, 0x04},   // 0x76, v
        {0x00, 0x00, 0x11, 0x11, 0x15, 0x15, 0x0a},   // 0x77, w
        {0x00, 0x00, 0x11, 0x0a, 0x04, 0x0a, 0x11},   // 0x78, x
        {0x00, 0x11, 0x11, 0x0f, 0x01, 0x11, 0x0e},   // 0x79, y
        {0x00, 0x00, 0x1f, 0x02, 0x04, 0x08, 0x1f},   // 0x7a, z
        {0x06, 0x08, 0x08, 0x10, 0x08, 0x08, 0x06},   // 0x7b, {
        {0x04, 0x04, 0x04, 0x00, 0x04, 0x04, 0x04},   // 0x7c, |
        {0x0c, 0x02, 0x02, 0x01, 0x02, 0x02, 0x0c},   // 0x7d, }
        {0x08, 0x15, 0x02, 0x00, 0x00, 0x00, 0x00},   // 0x7e, ~
        {0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f}   // 0x7f, DEL
    };

    public static void testEncodeDecodeForFont(int fontNum){
        List<List<Double>> fullFont = Utils.dataToBits(getFont(fontNum));

        Collections.shuffle(fullFont);

        int sublistDim = 8;

        List<List<Double>> font = fullFont.subList(0, sublistDim);

        AutoEncoder autoEncoder = getEncoder(fullFont.get(0).size(), Arrays.asList(50, 12, 2, 12, 50));

        stochasticTraining(autoEncoder, font, 100);

        double totalError = 0;
        for (List<Double> c : fullFont){
            List<Double> encodeDecode = autoEncoder.decode(autoEncoder.encode(c));

            List<Double> encodeDecodeRounded = encodeDecode.stream()
                    .mapToDouble(v->v>0?1.0:-1.0).boxed().collect(Collectors.toList());

            System.out.println("\n\n-------------");

            printLetter(c);

            System.out.println("\n");

            printLetter(encodeDecodeRounded);

            System.out.println("\n");

            double diff = IntStream.range(0, encodeDecode.size()).mapToDouble(i->Math.abs(encodeDecodeRounded.get(i) - c.get(i))).sum();
            totalError+=diff/2;
        }

        System.out.println(String.format("Average difference is %s out of %s (%s)",
                totalError/fullFont.size(),
                fullFont.get(0).size(),
                totalError/fullFont.size()/fullFont.get(0).size()));

    }

    private static void stochasticTraining(AutoEncoder ae, List<List<Double>> trainingData, int itNum){
         Random rnd = new Random();
        for(int it=0; it<itNum; it++){
            int randIndex = rnd.nextInt(trainingData.size());

            ae.step(trainingData.get(randIndex));
        }
    }

    private static void batchTraining(AutoEncoder ae, List<List<Double>> trainingData, int epochs){
        for(int epochNum = 0; epochNum<epochs; epochNum++){
            for(List<Double> c : trainingData){
                ae.step(c);
            }
        }
    }

    private static void printAllLetters(List<List<Double>> letters){
        System.out.println("\n\n\n\n\n\n\n\n\n\n------------------");
        for(List<Double> l : letters){
            System.out.println("\n\n\n-");
            printLetter(l);
        }
        System.out.println("\n\n\n\n\n\n\n\n\n\n------------------");
    }

    public static void testIfEncodeDecodeIsTheSameAsClassifyOfThePerceptron(){
        List<List<Double>> font = Utils.dataToBits(getFont(1));

        AutoEncoder autoEncoder = getEncoder(font.get(0).size(), Arrays.asList(7, 7, 2, 7, 7));

        Random rnd = new Random();
        int itNum = 10;
        for(int it=0; it<itNum; it++){
            int randIndex = rnd.nextInt(font.size());

            autoEncoder.step(font.get(randIndex));
        }

        for (List<Double> c : font){
            assert autoEncoder.decode(autoEncoder.encode(c)).equals(autoEncoder.getPerceptron().classify(c));
        }
    }

    private static AutoEncoder getEncoder(int dim, List<Integer> innerDims){
        double alpha = 0.01;
        int numberOfIterationsToReachAlpha = 10000;
        double a = 10, b = - Math.log(alpha * (1/a)) / numberOfIterationsToReachAlpha;

        return new AutoEncoder(
                (new MultiLayerPerceptron.Builder())
                        .setActivationFunction(Math::tanh)
                        .setActivationFunctionDerivative(p->1-Math.pow(Math.tanh(p), 2))
//                        .setTemperatureFunction(s->a*Math.exp(-b*s))
                        .setAlpha(alpha)
                        .setInnerLayersDimensions(innerDims)
                        .setInDim(dim)
                        .setOutDim(dim)
                        .create()
        );
    }

    private static Integer[][] getFont(int fontNum){
        switch (fontNum){
            case 1:
                return font1;
            case 2:
                return font2;
            case 3:
                return font3;
            default:
                throw new IllegalArgumentException("Invalid font number");
        }
    }

    private static void printLetter(List<Double> letter){
        int rowSize = 7;

        int rowIndex=0;
        for(Double c : letter){
            System.out.print(c.equals(-1.0) ? " " : "x");

            if(rowIndex == rowSize){
                System.out.print("\n");
                rowIndex = 0;
            }else{
                rowIndex++;
            }
        }
    }

}
